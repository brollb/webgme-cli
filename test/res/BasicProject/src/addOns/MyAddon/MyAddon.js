/*globals define*/
/*jshint node:true*/

/**
 * Generated by WebGME cli for the webgme on Mon Sep 21 2015 07:23:41 GMT-0500 (CDT).
 */

define(["addon/AddOnBase"], function (AddOnBase) {
  "use strict";
  var MyAddon = function (Core, storage, gmeConfig, logger, userId) {
    AddOnBase.call(this, Core, storage, gmeConfig, logger, userId);
  };

  // Prototypal inheritance from AddOnBase.
  MyAddon.prototype = Object.create(AddOnBase.prototype);
  MyAddon.prototype.constructor = MyAddon;

  MyAddon.prototype.getName = function () {
    return "MyAddon";
  };

  MyAddon.prototype.update = function (root, callback) {
    this.logger.info(
      "MyAddon",
      new Date().getTime(),
      "update",
      this.core.getGuid(root),
      this.core.getHash(root)
    );
    // Add update logic here!
    // TODO

    callback(null);
  };

  MyAddon.prototype.query = function (parameters, callback) {
    this.logger.info("MyAddon", new Date().getTime(), "query", parameters);
    // Add query logic here!
    // TODO
    callback(null, parameters);
  };

  MyAddon.prototype.stop = function (callback) {
    var self = this;

    AddOnBase.prototype.stop.call(this, function (err) {
      self.logger.info("MyAddon", new Date().getTime(), "stop");
      callback(err);
    });
  };

  //MyAddon.prototype.start = function (parameters, callback) {
  //    AddOnBase.prototype.start.call(this, parameters, callback);
  //    this.logger.info('MyAddon', new Date().getTime(), 'start');
  //};

  return MyAddon;
});
