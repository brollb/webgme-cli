/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator from webgme on Fri Jul 17 2015 22:13:17 GMT-0500 (CDT).
 */

define([
  "plugin/PluginConfig",
  "plugin/PluginBase",
  "plugin/OtherPlugin/OtherPlugin/meta",
], function (PluginConfig, PluginBase, MetaTypes) {
  "use strict";

  /**
   * Initializes a new instance of OtherPlugin.
   * @class
   * @augments {PluginBase}
   * @classdesc This class represents the plugin OtherPlugin.
   * @constructor
   */
  var OtherPlugin = function () {
    // Call base class' constructor.
    PluginBase.call(this);
    this.metaTypes = MetaTypes;
  };

  // Prototypal inheritance from PluginBase.
  OtherPlugin.prototype = Object.create(PluginBase.prototype);
  OtherPlugin.prototype.constructor = OtherPlugin;

  /**
   * Gets the name of the OtherPlugin.
   * @returns {string} The name of the plugin.
   * @public
   */
  OtherPlugin.prototype.getName = function () {
    return "New Plugin";
  };

  /**
   * Gets the semantic version (semver.org) of the OtherPlugin.
   * @returns {string} The version of the plugin.
   * @public
   */
  OtherPlugin.prototype.getVersion = function () {
    return "0.1.0";
  };

  /**
   * Main function for the plugin to execute. This will perform the execution.
   * Notes:
   * - Always log with the provided logger.[error,warning,info,debug].
   * - Do NOT put any user interaction logic UI, etc. inside this method.
   * - callback always has to be called even if error happened.
   *
   * @param {function(string, plugin.PluginResult)} callback - the result callback
   */
  OtherPlugin.prototype.main = function (callback) {
    // Use self to access core, project, result, logger etc from PluginBase.
    // These are all instantiated at this point.
    var self = this;
    self.updateMETA(self.metaTypes);
    // Using the logger.
    self.logger.debug("This is a debug message.");
    self.logger.info("This is an info message.");
    self.logger.warn("This is a warning message.");
    self.logger.error("This is an error message.");

    // This will save the changes. If you don't want to save;
    // exclude self.save and call callback directly from this scope.
    self.result.setSuccess(true);
    self.save("added obj", function (err) {
      callback(null, self.result);
    });
  };

  return OtherPlugin;
});
